'use strict';

jQuery.fn.extend({
	DataFilter: function (options) {
		// Define los datos por defecto
		var values = {
			dom: '<"row"<"col-xs-6 col-sm-4 col-md-6"f><"col-xs-6 col-sm-4 col-md-2 col-md-offset-1"l><"col-xs-12 col-sm-4 col-md-3"<"dataTables_toolbar">>><"table-responsive"t><"row"<"col-sm-5 hidden-xs"i><"col-xs-12 col-sm-7 text-right"p>>',
			lengthMenu:[[25, 50, 100, 200, -1], [25, 50, 100, 200, 'Todos']]
		}

		var defaults = {
			button: 'btn-default',
			filter: true,
			icon: 'glyphicon glyphicon-filter',
			name: 'reporte',
			position: 'top',
			separator: ',',
			size: 10,
			reports: 'txt|csv|json|excel|word|pdf|html',
			languajes: {
				begins: 'Empieza con...',
				column: 'Columna',
				columns: 'Columnas',
				contains: 'Contiene...',
				ends: 'Termina con...',
				equals: 'Es igual a...',
				filterby: 'Filtrar por',
				filterhidden: 'Ocultar filtros',
				filters: 'Filtros',
				filtershown: 'Mostrar filtros',
				none: 'Ninguno',
				notcontains: 'No contiene...',
				notequals: 'No es igual a...',
				reports: 'Reportes'
			}
		}

		var message = 'Su navegador no soporta esta funcionalidad, si desea seguir con el proceso debe actualizar o cambiar de navegador.';

		// Conjunciona los valores recibidos con los por defecto
		options = $.extend({}, defaults, options);
		
		// Verifica si existen valores principales
		if (options.values) {
			options.values = $.extend({}, values, options.values);
		} else {
			options.values = values;
		}

		// Convierte la cadena reportes en arreglo
		if ($.trim(options.reports) != '') {
			options.reports = options.reports.split('|');
		} else {
			options.reports = [];
		}

		// Obtiene el grupo de elementos
		var $tables = $(this);

		// Reestructura las tablas
		if (options.position == 'top') {
			$tables.addClass('table-restructured');
		}

		// Ejecuta el plugin requerido y lo almacena en una variable de retorno
		var tables = $tables.DataTable(options.values);

		// Recorre todas los elementos afectados
		$tables.each(function (nro) {
			// Muestra todas las columnas
			tables.table(nro).columns().visible(true);

			// Obtiene la tabla actual
			var $table = $(this);

			// Define variables a nivel de tabla
			var toolbar = '', fields = '';

			// Define el nombre del recurso que se esta usando actualmente
			var resource = 'DataFilters_' + $table.attr('id') + '_' + location.pathname + location.search;

			// Verifica si la opcion de almacenamiento local esta activo
			if (options.values.stateSave === true) {
				// Obtiene los datos del recurso
				var storage = localStorage.getItem(resource);

				// Verifica si existen datos
				if (!storage) {
					// Genera el objeto para el almacenamiento
					storage = {
						columns: [],
						filters: [],
						state: true
					}

					// Convierte en texto el objeto
					storage = JSON.stringify(storage);

					// Almacena los datos de manera local
					localStorage.setItem(resource, storage);
				}
			}

			// Recorre las celdas del pie de tabla
			$table.find('tfoot tr:first').children().each(function (col) {
				// Obtiene la celda actual
				var $th = $(this);

				// Define el estado de la celda
				var state = true;

				// Obtiene el estado de la celda
				if ($th.data('datafilter-filter') != undefined) {
					if ($th.data('datafilter-filter') == false) {
						state = false;
					}
				}
				
				// Almacena el nombre actual de la columna
				var text = $.trim($th.text());

				// Verifica si el filtro se aplicara a la celda
				if (state) {
					// Componente el filtro de columna
					var filter = '' +
					((options.filter) ?
					('<div>' +
						'<div id="filter_' + nro + '_' + col + '" class="input-group ' + ((options.position == 'top') ? 'dropdown' : 'dropup') + '">' +
							'<input type="text" class="form-control" placeholder="' + $.trim(options.languajes.filterby) + ' ' + ((text == '') ? $.trim(options.languajes.column.toLowerCase()) + ' ' + (col + 1) : text.toLowerCase()) + '">' +
							'<div class="input-group-btn">' +
								'<button type="button" class="btn ' + options.button + ' dropdown-toggle" data-toggle="dropdown">' +
									'<i class="' + options.icon + '"></i>' +
								'</button>' +
								'<ul class="dropdown-menu dropdown-menu-right">' +
									'<li><label><input type="radio" name="filter_' + nro + '_' + col + '" value="equals"> ' + $.trim(options.languajes.equals) + '</label></li>' +
									'<li><label><input type="radio" name="filter_' + nro + '_' + col + '" value="not equals"> ' + $.trim(options.languajes.notequals) + '</label></li>' +
									'<li><label><input type="radio" name="filter_' + nro + '_' + col + '" value="begins"> ' + $.trim(options.languajes.begins) + '</label></li>' +
									'<li><label><input type="radio" name="filter_' + nro + '_' + col + '" value="ends"> ' + $.trim(options.languajes.ends) + '</label></li>' +
									'<li><label><input type="radio" name="filter_' + nro + '_' + col + '" value="contains" checked> ' + $.trim(options.languajes.contains) + '</label></li>' +
									'<li><label><input type="radio" name="filter_' + nro + '_' + col + '" value="not contains"> ' + $.trim(options.languajes.notcontains) + '</label></li>' +
									'<li><label><input type="radio" name="filter_' + nro + '_' + col + '" value="none"> ' + $.trim(options.languajes.none) + '</label></li>' +
								'</ul>' +
							'</div>' +
						'</div>' +
					'</div>') : (
					'<div>' +
						'<div id="filter_' + nro + '_' + col + '">' +
							'<input type="text" class="form-control" placeholder="' + $.trim(options.languajes.filterby) + ' ' + ((text == '') ? $.trim(options.languajes.column.toLowerCase()) + ' ' + (col + 1) : text.toLowerCase()) + '">' +
						'</div>' +
					'</div>'));

					// Imprime el componente en la celda
					$th.html(filter);

					// Obtiene el elemento de entrada del componente
					var $container = $('#filter_' + nro + '_' + col);

					// Escucha cambios en el elemento de entrada del componente
					$container.find(':text').on('keyup change', function () {
						// Obtiene el elemento actual
						var $text = $(this);

						// Obtiene el nombre del filtro que esta siendo aplicado
						var text = $text.val();

						// Obtiene el nombre del filtro que esta siendo aplicado
						var filter = $container.find(':checked').val();

						// Obtiene el arreglo de coincidencias de acuerdo al separador
						var values = $.trim(text).split(options.separator);

						// Define las variables para la manipulacion de los filtros
						var words = '', regexp = '';

						// Recorre el arreglo de coincidencias descarcantando los vacios
						for (var i in values) {
							var value = $.trim(values[i]);
							if (value != '') {
								words += '|' + value;
							}
						}

						// Conforma lo esencial de la expresion regular
						words = words.substring(1, words.length);

						// Compara las palabras a filtrar con el filtro activo
						switch (filter) {
							case 'equals':
								regexp = '^(' + words + ')$';
							break;
							case 'not equals':
								regexp = '^(?!(' + words + ')$)';
							break;
							case 'begins':
								regexp = '^(' + words + ').*';
							break;
							case 'ends':
								regexp = '.*(' + words + ')$';
							break;
							case 'not contains':
								regexp = '^(?!.*(' + words + ').*)';
							break;
							case 'none':
								regexp = '';
							break;
							default:
								regexp = '.*(' + words + ').*';
							break;
						}

						// Verifica si la palabra esta vacia para poder ejecutar el filtrado
						if (words != '') {
							tables.table(nro).column(col).search(regexp, true, false, true).draw();
						} else {
							tables.table(nro).column(col).search('', true, false, true).draw();
						}

						// Verifica si la opcion de almacenamiento local esta activo
						if (options.values.stateSave === true) {
							// Obtiene los datos del recurso
							var storage = localStorage.getItem(resource);

							// Convierte en objeto los datos obtenidos
							storage = JSON.parse(storage);

							// Genera el objecto con los datos de la columna actual
							var column = {
								search: text,
								filter: filter
							}

							// Adiciona el elemento objeto al arreglo
							storage.filters[col] = column;

							// Convierte en texto el objeto
							storage = JSON.stringify(storage);

							// Almacena los datos de manera local
							localStorage.setItem(resource, storage);
						}
					});

					// Escucha cambios en el elemento de seleccion de filtros del componente para aplicarlos
					$container.find(':radio').on('change', function () {
						var $radio = $(this);
						if ($radio.val() == 'none') {
							$container.find(':text').val('');
						}
						$container.find(':text').trigger('change');
					});

					// Monitorea el elemento de entrada del componente para cambiar o no su ancho
					$container.on('focusin', function () {
						// Proceso para cambiar el ancho
						var $parent = $container.parent();
						var width = $container.find('ul').outerWidth() || 160;
						if ($parent.outerWidth() < width) {
							$parent.css('width', width + 'px');
						}
					}).on('focusout', function () {
						// Proceso para revertir el cambio
						$container.parent().css('width', 'auto');
					});

					// Verifica si la opcion de almacenamiento local esta activo
					if (options.values.stateSave === true) {
						// Obtiene los datos del recurso
						var storage = localStorage.getItem(resource);

						// Convierte en objeto los datos obtenidos
						storage = JSON.parse(storage);

						// Verifica si existen datos para la columna
						if (storage.filters[col]) {
							$container.find(':radio[value="' + storage.filters[col].filter + '"]').prop('checked', true);
							$container.find(':text').val(storage.filters[col].search).trigger('keyup');
						} else {
							$container.find(':radio[value="contains"]').prop('checked', true);
							$container.find(':text').val('').trigger('keyup');
						}
					}
				}

				// Verifica si la opcion de almacenamiento local esta activo
				if (options.values.stateSave === true) {
					// Define variable de estado
					var visible = true;

					// Obtiene los datos del recurso
					var storage = localStorage.getItem(resource);

					// Convierte en objeto los datos obtenidos
					storage = JSON.parse(storage);

					// Verifica si la columna esta en blanco
					if (storage.columns[col] == null || storage.columns[col] == undefined) {
						// Obtiene el estado de la celda
						if ($th.data('datafilter-visible') != undefined) {
							if ($th.data('datafilter-visible') == false) {
								visible = false;
							}
						}
					} else {
						// Obtiene el estado de la celda
						visible = storage.columns[col];
					}

					// Verifica si la columna esta visible
					if (!visible) {
						// Oculta la columna
						tables.table(nro).column(col).visible(false);

						// Cambia el ancho de la tabla
						$table.css('width', '100%');
					}

					// Compone la lista de columnas
					fields += '<li><label><input type="checkbox" value="' + col + '"' + ((visible) ? ' checked' : '') + '> ' + ((text == '') ? $.trim(options.languajes.column) + ' ' + (col + 1) : text) + '</label></li>';
				} else {
					// Define variable de estado
					var visible = true;

					// Obtiene el estado de la celda
					if ($th.data('datafilter-visible') != undefined) {
						if ($th.data('datafilter-visible') == false) {
							visible = false;
						}
					}

					// Verifica si la columna esta visible
					if (!visible) {
						// Oculta la columna
						tables.table(nro).column(col).visible(false);

						// Cambia el ancho de la tabla
						$table.css('width', '100%');
					}

					// Compone la lista de columnas
					fields += '<li><label><input type="checkbox" value="' + col + '"' + ((visible) ? ' checked' : '') + '> ' + ((text == '') ? $.trim(options.languajes.column) + ' ' + (col + 1) : text) + '</label></li>';
				}
			});
			
			// Componente barra de herramientas
			toolbar = '' +
			'<div class="btn-group btn-group-justified">' +
				'<div class="btn-group" data-toggle="tooltip" data-title="' + options.languajes.columns + '">' +
					'<button type="button" class="btn ' + options.button + ' dropdown-toggle" data-toggle="dropdown">' +
						'<i class="glyphicon glyphicon-th-large"></i>' +
					'</button>' +
					'<ul id="fields_' + nro + '" class="dropdown-menu">' +
					'</ul>' +
				'</div>' +
				'<div class="btn-group" data-toggle="tooltip" data-title="' + options.languajes.filters + '">' +
					'<button type="button" class="btn ' + options.button + ' dropdown-toggle" data-toggle="dropdown">' +
						'<i class="glyphicon glyphicon-filter"></i>' +
					'</button>' +
					'<ul id="states_' + nro + '" class="dropdown-menu dropdown-menu-right">' +
						'<li><label><input type="radio" name="states_' + nro + '" value="hide"> ' + options.languajes.filterhidden + '</label></li>' +
						'<li><label><input type="radio" name="states_' + nro + '" value="show" checked> ' + options.languajes.filtershown + '</label></li>' +
					'</ul>' +
				'</div>' +
				((options.reports.length > 0) ?
				('<div class="btn-group" data-toggle="tooltip" data-title="' + options.languajes.reports + '">' +
					'<button type="button" class="btn ' + options.button + ' dropdown-toggle" data-toggle="dropdown">' +
						'<i class="glyphicon glyphicon-file"></i>' +
					'</button>' +
					'<ul id="reports_' + nro + '" class="dropdown-menu dropdown-menu-right">' +
						(($.inArray('txt', options.reports) >= 0) ? '<li><a href="#" id="report_txt_' + nro + '">Archivo <kbd>TXT</kbd></a></li>' : '') +
						(($.inArray('csv', options.reports) >= 0) ? '<li><a href="#" id="report_csv_' + nro + '">Archivo <kbd>CSV</kbd></a></li>' : '') +
						(($.inArray('json', options.reports) >= 0) ? '<li><a href="#" id="report_json_' + nro + '">Archivo <kbd>JSON</kbd></a></li>' : '') +
						(($.inArray('excel', options.reports) >= 0) ? '<li><a href="#" id="report_excel_' + nro + '">Documento <kbd>EXCEL</kbd></a></li>' : '') +
						(($.inArray('word', options.reports) >= 0) ? '<li><a href="#" id="report_word_' + nro + '">Documento <kbd>WORD</kbd></a></li>' : '') +
						(($.inArray('pdf', options.reports) >= 0) ? '<li><a href="#" id="report_pdf_' + nro + '" target="_blank">Documento <kbd>PDF</kbd></a></li>' : '') +
						(($.inArray('html', options.reports) >= 0) ? '<li><a href="#" id="report_html_' + nro + '">Documento <kbd>HTML</kbd></a></li>' : '') +
					'</ul>' +
				'</div>') : '') +
			'</div>';

			// Imprime el componente barra de herramientas
			$table.parent().parent().find('div.dataTables_toolbar').html(toolbar);

			// Obtiene el elemento contenedor de lista de columnas
			var $fields = $('#fields_' + nro);

			// Imprime la lista de columnas
			$fields.append(fields);
			
			// Escucha cambios en la lista de columnas
			$fields.find(':checkbox').on('change', function () {
				// Obtiene el elemento actual
				var $field = $(this);

				// Obtiene la posicion de la columna actual
				var position = $field.val();

				// Obtiene el atributo de marcado del elemento
				var checked = $field.prop('checked');

				// Obtiene la cantidad de elementos marcados
				var size = $('#fields_' + nro).find(':checked').size();

				// Define variable de visibilidad
				var visible = true;

				// Verifica si la cantidad de elemento marcados es mayor a cero
				if (size > 0) {
					// La variable de visibilidad toma el valor del elemento
					visible = checked;

					// Se oculta o muestra la columna de acuerdo a la variable de visibilidad
					tables.table(nro).column(position).visible(visible);

					// Se cambia el ancho de la tabla por efectos de la visibilidad
					$table.css('width', '100%');
				} else {
					// Se cambia el atributo del elemento a marcado
					$field.prop('checked', visible);
				}

				// Verifica si la opcion de almacenamiento local esta activo
				if (options.values.stateSave === true) {
					// Obtiene los datos del recurso
					var storage = localStorage.getItem(resource);

					// Convierte en objeto los datos obtenidos
					storage = JSON.parse(storage);

					// Adiciona el elemento objeto al arreglo
					storage.columns[position] = visible;

					// Convierte en texto el objeto
					storage = JSON.stringify(storage);

					// Almacena los datos de manera local
					localStorage.setItem(resource, storage);
				}
			});

			// Obtiene el elemento contenedor de lista de columnas
			var $states = $('#states_' + nro);

			$states.find(':radio').on('change', function () {
				// Obtiene el elemento actual
				var $states = $(this);

				// Define variable de visibilidad
				var visible = true;

				// Verifica si el estado es oculto
				if ($states.val() == 'hide') {
					$table.find('tfoot').hide();
					visible = false;
				} else {
					$table.find('tfoot').show();
					visible = true;
				}

				// Verifica si la opcion de almacenamiento local esta activo
				if (options.values.stateSave === true) {
					// Obtiene los datos del recurso
					var storage = localStorage.getItem(resource);

					// Convierte en objeto los datos obtenidos
					storage = JSON.parse(storage);

					// Adiciona el elemento objeto al arreglo
					storage.state = visible;

					// Convierte en texto el objeto
					storage = JSON.stringify(storage);

					// Almacena los datos de manera local
					localStorage.setItem(resource, storage);
				}
			});

			// Verifica si la opcion de almacenamiento local esta activo
			if (options.values.stateSave === true) {
				// Obtiene los datos del recurso
				var storage = localStorage.getItem(resource);

				// Convierte en objeto los datos obtenidos
				storage = JSON.parse(storage);

				// Verifica si existen datos para la columna
				if (storage.state) {
					$states.find(':radio[value="show"]').prop('checked', true).trigger('change');
				} else {
					$states.find(':radio[value="hide"]').prop('checked', true).trigger('change');
				}
			}

			// Apartado para reportes, son requeridos los archivos jquery.base64, modernizr.js y is.js

			// Reporte en formato .txt
			$('#report_txt_' + nro).on('click', function (e) {
				// Obtiene la fecha y hora actual
				var date = new Date();
				date = '_' + date.getFullYear() + '-' + ((date.getMonth() + 1 < 10) ? '0' : '') + (date.getMonth() + 1) + '-' + ((date.getDate() < 10) ? '0' : '') + date.getDate() + '_' + ((date.getHours() < 10) ? '0' : '') + date.getHours() + '-' + ((date.getMinutes() < 10) ? '0' : '') + date.getMinutes() + '-' + ((date.getSeconds() < 10) ? '0' : '') + date.getSeconds();

				// Verifica si existe la funcionalidad en el navegador
				if (Modernizr.datauri && Modernizr.adownload) {
					var table = '';
					var tbody = '';
					var thead = '';
					var text = '';

					$table.find('thead tr:first').children().each(function (i) {
						thead += $.trim($(this).text()) + ', ';
					});

					thead += ';';

					$table.find('tbody tr').each(function (i) {
						$(this).children().each(function (j) {
							text = $(this).text();
							text = text.replace(new RegExp('\\t', 'g'), '');
							text = text.replace(new RegExp('\\n', 'g'), ' ');
							tbody += $.trim(text) + ', ';
						});

						tbody += ';';
					});

					table = thead + tbody;
					table = table.replace(new RegExp(', ;', 'g'), ';');

					$(this).attr('download', options.name + date + '.txt');
					$(this).attr('href', 'data:text/txt;base64,' + $.base64.encode(table));
				} else {
					bootbox.alert(message);
				}
			});

			// Reporte en formato .csv
			$('#report_csv_' + nro).on('click', function (e) {
				// Obtiene la fecha y hora actual
				var date = new Date();
				date = '_' + date.getFullYear() + '-' + ((date.getMonth() + 1 < 10) ? '0' : '') + (date.getMonth() + 1) + '-' + ((date.getDate() < 10) ? '0' : '') + date.getDate() + '_' + ((date.getHours() < 10) ? '0' : '') + date.getHours() + '-' + ((date.getMinutes() < 10) ? '0' : '') + date.getMinutes() + '-' + ((date.getSeconds() < 10) ? '0' : '') + date.getSeconds();

				// Verifica si existe la funcionalidad en el navegador
				if (Modernizr.datauri && Modernizr.adownload) {
					var tbody = '';
					var thead = '';
					var text = '';

					$table.find('thead tr:first').children().each(function (i) {
						thead += $.trim($(this).text()) + ';';
					});

					thead += '\n';

					$table.find('tbody tr').each(function (i) {
						$(this).children().each(function (j) {
							text = $(this).text();
							text = text.replace(new RegExp('\\t', 'g'), '');
							text = text.replace(new RegExp('\\n', 'g'), ' ');
							tbody += $.trim(text) + ';';
						});

						tbody += '\n';
					});

					$(this).attr('download', options.name + date + '.csv');
					$(this).attr('href', 'data:text/csv;base64,' + $.base64.encode(thead + tbody));
				} else {
					bootbox.alert(message);
				}
			});

			// Reporte en formato .json
			$('#report_json_' + nro).on('click', function (e) {
				// Obtiene la fecha y hora actual
				var date = new Date();
				date = '_' + date.getFullYear() + '-' + ((date.getMonth() + 1 < 10) ? '0' : '') + (date.getMonth() + 1) + '-' + ((date.getDate() < 10) ? '0' : '') + date.getDate() + '_' + ((date.getHours() < 10) ? '0' : '') + date.getHours() + '-' + ((date.getMinutes() < 10) ? '0' : '') + date.getMinutes() + '-' + ((date.getSeconds() < 10) ? '0' : '') + date.getSeconds();

				// Verifica si existe la funcionalidad en el navegador
				if (Modernizr.datauri && Modernizr.adownload) {
					var table = '';
					var tbody = '';
					var thead = '';
					var text = '';

					$table.find('thead tr:first').children().each(function (i) {
						thead += '"' + $.trim($(this).text()) + '", ';
					});

					thead = '{\n\t"header": [\n\t\t[' + thead + ']\n\t],';

					$table.find('tbody tr').each(function (i) {
						tbody += '\n\t\t[';

						$(this).children().each(function (j) {
							text = $(this).text();
							text = text.replace(new RegExp('\\t', 'g'), '');
							text = text.replace(new RegExp('\\n', 'g'), ' ');
							tbody += '"' + $.trim(text) + '", ';
						});

						tbody += '],';
					});

					tbody = '\n\t"data": [' + tbody.substring(0, tbody.length - 1) + '\n\t]\n}';
					table = thead + tbody;
					table = table.replace(new RegExp(', ]', 'g'), ']');

					$(this).attr('download', options.name + date + '.json');
					$(this).attr('href', 'data:application/json;base64,' + $.base64.encode(table));
				} else {
					bootbox.alert(message);
				}
			});

			// Reporte en formato .xls
			$('#report_excel_' + nro).on('click', function (e) {
				// Obtiene la fecha y hora actual
				var date = new Date();
				date = '_' + date.getFullYear() + '-' + ((date.getMonth() + 1 < 10) ? '0' : '') + (date.getMonth() + 1) + '-' + ((date.getDate() < 10) ? '0' : '') + date.getDate() + '_' + ((date.getHours() < 10) ? '0' : '') + date.getHours() + '-' + ((date.getMinutes() < 10) ? '0' : '') + date.getMinutes() + '-' + ((date.getSeconds() < 10) ? '0' : '') + date.getSeconds();

				// Verifica si existe la funcionalidad en el navegador
				if (Modernizr.datauri && Modernizr.adownload) {
					var tbody = '';
					var thead = '';
					var file = '';
					var text = '';

					$table.find('thead tr:first').children().each(function (i) {
						thead += '<th>' + $.trim($(this).text()) + '</th>';
					});

					thead = '<tr>' + thead + '</tr>';
					$table.find('tbody tr').each(function (i) {
						tbody += '<tr>'
						$(this).children().each(function (j) {
							text = $(this).text();
							text = text.replace(new RegExp('\\t', 'g'), '');
							text = text.replace(new RegExp('\\n', 'g'), ' ');
							tbody += '<td>' + $.trim(text) + '</td>';
						});
						tbody += '</tr>';
					});

					file += '<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns="http://www.w3.org/TR/REC-html40">';
					file += '<head>';
					file += '<!--[if gte mso 9]>';
					file += '<xml>';
					file += '<x:ExcelWorkbook>';
					file += '<x:ExcelWorksheets>';
					file += '<x:ExcelWorksheet>';
					file += '<x:Name>';
					file += 'Hoja';
					file += '</x:Name>';
					file += '<x:WorksheetOptions>';
					file += '<x:DisplayGridlines/>';
					file += '</x:WorksheetOptions>';
					file += '</x:ExcelWorksheet>';
					file += '</x:ExcelWorksheets>';
					file += '</x:ExcelWorkbook>';
					file += '</xml>';
					file += '<![endif]-->';
					file += '</head>';
					file += '<body>';
					file += '<table cellspacing="0" cellpadding="0" border="1">' + thead + tbody + '</table>';
					file += '</body>';
					file += '</html>';

					$(this).attr('download', options.name + date + '.xls');
					$(this).attr('href', 'data:application/vnd.ms-excel;base64,' + $.base64.encode(file));
				} else {
					bootbox.alert(message);
				}
			});

			// Reporte en formato .doc
			$('#report_word_' + nro).on('click', function (e) {
				// Obtiene la fecha y hora actual
				var date = new Date();
				date = '_' + date.getFullYear() + '-' + ((date.getMonth() + 1 < 10) ? '0' : '') + (date.getMonth() + 1) + '-' + ((date.getDate() < 10) ? '0' : '') + date.getDate() + '_' + ((date.getHours() < 10) ? '0' : '') + date.getHours() + '-' + ((date.getMinutes() < 10) ? '0' : '') + date.getMinutes() + '-' + ((date.getSeconds() < 10) ? '0' : '') + date.getSeconds();

				// Verifica si existe la funcionalidad en el navegador
				if (Modernizr.datauri && Modernizr.adownload) {
					var tbody = '';
					var thead = '';
					var file = '';
					var text = '';

					$table.find('thead tr:first').children().each(function (i) {
						thead += '<th>' + $.trim($(this).text()) + '</th>';
					});

					thead = '<tr>' + thead + '</tr>';

					$table.find('tbody tr').each(function (i) {
						tbody += '<tr>'
						$(this).children().each(function (j) {
							text = $(this).html();
							tbody += '<td>' + $.trim(text) + '</td>';
						});
						tbody += '</tr>';
					});

					file += '<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:doc" xmlns="http://www.w3.org/TR/REC-html40">';
					file += '<head>';
					file += '</head>';
					file += '<body>';
					file += '<table cellspacing="0" cellpadding="0" border="1">' + thead + tbody + '</table>';
					file += '</body>';
					file += '</html>';

					$(this).attr('download', options.name + date + '.doc');
					$(this).attr('href', 'data:application/vnd.ms-doc;base64,' + $.base64.encode(file));
				} else {
					bootbox.alert(message);
				}
			});

			// Reporte en formato .html
			$('#report_html_' + nro).on('click', function (e) {
				// Obtiene la fecha y hora actual
				var date = new Date();
				date = '_' + date.getFullYear() + '-' + ((date.getMonth() + 1 < 10) ? '0' : '') + (date.getMonth() + 1) + '-' + ((date.getDate() < 10) ? '0' : '') + date.getDate() + '_' + ((date.getHours() < 10) ? '0' : '') + date.getHours() + '-' + ((date.getMinutes() < 10) ? '0' : '') + date.getMinutes() + '-' + ((date.getSeconds() < 10) ? '0' : '') + date.getSeconds();

				// Verifica si existe la funcionalidad en el navegador
				e.preventDefault();
				var tbody = '';
				var thead = '';
				var table = '';
				var html = '';

				$table.find('thead tr:first').children().each(function (i) {
					thead += '<th>' + $.trim($(this).text()) + '</th>';
				});

				thead = '<tr>' + thead + '</tr>';

				$table.find('tbody tr').each(function (i) {
					tbody += '<tr>'
					$(this).children().each(function (j) {
						html = $(this).text();
						html = html.replace(new RegExp('<\\s*([a-z]+).*?>', 'g'), '<$1>');
						tbody += '<td>' + $.trim(html) + '</td>';
					});
					tbody += '</tr>';
				});

				table = '<table cellpadding="0" cellspacing="0">' + thead + tbody + '</table>';

				html = '' +
				'<!doctype html>' +
				'<html lang="en">' +
					'<head>' +
						'<meta charset="utf-8">' +
						'<title>' + options.name + '</title>' +
						'<style>' +
							'body {font-family: Helvetica, Arial, sans-serif;font-size: 12px;margin: 0;}' +
							'table {border-collapse: collapse;color: #000;font-size: 12px;width: 100%;}' +
							'th {background-color: #eee;border: 1px solid #444;font-size: 13px;padding: 5px;white-space: nowrap;}' +
							'td {border: 1px solid #444;padding: 5px;vertical-align: top;}' +
							'h2,h3 {margin: 0;margin-bottom: 10px;text-align: center;}' +
						'</style>' +
					'</head>' +
					'<body>' +
						table +
					'</body>' +
				'</html>';

				var preview = window.open('', '_blank');
				preview.document.write(html);
				preview.document.close();
				preview.focus();
				preview.print();
				preview.close();
			});

			// Reporte en formato .pdf
			$('#report_pdf_' + nro).on('click', function (e) {
				// Obtiene la fecha y hora actual
				var date = new Date();
				date = '_' + date.getFullYear() + '-' + ((date.getMonth() + 1 < 10) ? '0' : '') + (date.getMonth() + 1) + '-' + ((date.getDate() < 10) ? '0' : '') + date.getDate() + '_' + ((date.getHours() < 10) ? '0' : '') + date.getHours() + '-' + ((date.getMinutes() < 10) ? '0' : '') + date.getMinutes() + '-' + ((date.getSeconds() < 10) ? '0' : '') + date.getSeconds();

				// Define las variables
				e.preventDefault();
				var table = [];
				var thead = [];
				var contents = [];
				var widths = [];

				$table.find('thead tr:first').children().each(function (i) {
					var $this = $(this);
					var content = ($this.data('datafilter-content') == 'html') ? 'html' : 'text';
					var width = $this.data('datafilter-width');
					width = ((!isNaN(width) && width > 0) || width == '*' || width == 'auto') ? width : 'auto';
					contents.push(content);
					widths.push(width);
					thead.push({text: $.trim($this.text()), bold: true, fontSize: options.size + 1, fillColor: '#eee'});
				});

				table.push(thead);

				$table.find('tbody tr').each(function (i) {
					var tbody = [];

					$(this).children().each(function (j) {
						if (contents[j] == 'text') {
							text = $(this).text();
							text = text.replace(new RegExp('\\n', 'g'), ' ');
							text = text.replace(new RegExp('\\s+', 'g'), ' ');
							tbody.push($.trim(text));
						} else {
							text = $(this).html();
							var texts = text.split('<br>');
							var object = '';

							for (var k in texts) {
								var text = $.trim(texts[k]);
								text = text.replace(new RegExp('\\t', 'g'), '');
								text = text.replace(new RegExp('\\n', 'g'), '');
								text = text.replace(new RegExp('((</[a-z]+>)+)$', 'g'), '\\n$1');
								text = text.replace(new RegExp('<\\s*([a-z]+).*?>', 'g'), '<$1>');
								text = text.replace(new RegExp('(<[a-z]+>)+', 'g'), '{"text": "');
								text = text.replace(new RegExp('(</strong>|</b>)', 'g'), '", "bold": true},');
								text = text.replace(new RegExp('(</em>|</i>)', 'g'), '", "italics": true},');
								text = text.replace(new RegExp('(</u>)', 'g'), '", "decoration": "underline"},');
								text = text.replace(new RegExp('(</small>)', 'g'), '", "fontSize": ' + (options.size - 1) + '},');
								text = text.replace(new RegExp('(</span>|</a>|</code>|</div>|</p>)', 'g'), '"},');
								text = text.replace(new RegExp('},"', 'g'), '');

								if (!/^{.*},$/.test(text)) {
									text = '"' + text + '\\n",';
								}

								object += text;
							}

							object = object.substring(0, object.length - 1);
							object = '{"text": [' + object + ']}';
							object = JSON.parse(object);
							tbody.push(object);
						}
					});

					table.push(tbody);
				});

				if ($.inArray('*', widths) == -1) {
					widths.pop();
					widths.push('*');
				}

				var documento = {
					pageSize: 'LETTER',
					pageOrientation: 'landscape',
					pageMargins: [30, 30, 30, 30],
					content: [
						{
							color: '#000',
							fontSize: options.size,
							table: {
								headerRows: 1,
								widths: widths,
								body: table
							},
							layout: {
								hLineWidth: function (i, node) {return (i === 0 || i === 1 || i === node.table.body.length) ? 1 : 1;},
								vLineWidth: function (i, node) {return (i === 0 || i === node.table.widths.length) ? 1 : 1;},
								hLineColor: function (i, node) {return '#444';},
								vLineColor: function (i, node) {return '#444';},
								paddingLeft: function (i, node) {return 4;},
								paddingRight: function (i, node) {return 4;},
								paddingTop: function (i, node) {return 4;},
								paddingBottom: function (i, node) {return 4;}
							}
						}
					]
				};

				pdfMake.createPdf(documento).download(options.name + date + '.pdf');
			});
		});
		
		// Retorna el grupo de elementos
		return tables;
	}
});